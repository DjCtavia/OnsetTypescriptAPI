import * as ts from "typescript";
import { TranspileError } from "./TranspileError";
export declare const transpileError: (error: TranspileError) => ts.Diagnostic;
export declare const tstlOptionsAreMovingToTheTstlObject: (tstl: Record<string, any>) => ts.Diagnostic;
export declare const toLoadTransformerItShouldBeTranspiled: (transform: string) => ts.Diagnostic;
export declare const couldNotResolveTransformerFrom: (transform: string, base: string) => ts.Diagnostic;
export declare const transformerShouldHaveAExport: (transform: string, importName: string) => ts.Diagnostic;
export declare const transformerShouldBeATsTransformerFactory: (transform: string) => ts.Diagnostic;
export declare const watchErrorSummary: (errorCount: number) => ts.Diagnostic;
export declare const unknownCompilerOption: (name: string) => ts.Diagnostic;
export declare const compilerOptionRequiresAValueOfType: (name: string, type: string) => ts.Diagnostic;
export declare const optionProjectCannotBeMixedWithSourceFilesOnACommandLine: () => ts.Diagnostic;
export declare const cannotFindATsconfigJsonAtTheSpecifiedDirectory: (dir: string) => ts.Diagnostic;
export declare const theSpecifiedPathDoesNotExist: (dir: string) => ts.Diagnostic;
export declare const compilerOptionExpectsAnArgument: (name: string) => ts.Diagnostic;
export declare const argumentForOptionMustBe: (name: string, values: string) => ts.Diagnostic;
export declare const optionCanOnlyBeSpecifiedInTsconfigJsonFile: (name: string) => ts.Diagnostic;
export declare const optionBuildMustBeFirstCommandLineArgument: () => ts.Diagnostic;
