import * as ts from "typescript";
import { LuaTarget } from "./CompilerOptions";
import { TranspileError } from "./TranspileError";
export declare const CouldNotCast: (castName: string) => Error;
export declare const ForbiddenEllipsisDestruction: (node: ts.Node) => TranspileError;
export declare const ForbiddenForIn: (node: ts.Node) => TranspileError;
export declare const ForbiddenLuaTableSetExpression: (node: ts.Node) => TranspileError;
export declare const ForbiddenLuaTableNonDeclaration: (node: ts.Node) => TranspileError;
export declare const InvalidExtendsLuaTable: (node: ts.Node) => TranspileError;
export declare const InvalidInstanceOfLuaTable: (node: ts.Node) => TranspileError;
export declare const ForbiddenLuaTableUseException: (description: string, node: ts.Node) => TranspileError;
export declare const HeterogeneousEnum: (node: ts.Node) => TranspileError;
export declare const InvalidDecoratorArgumentNumber: (name: string, got: number, expected: number, node: ts.Node) => TranspileError;
export declare const InvalidDecoratorContext: (node: ts.Node) => TranspileError;
export declare const InvalidExtensionMetaExtension: (node: ts.Node) => TranspileError;
export declare const InvalidNewExpressionOnExtension: (node: ts.Node) => TranspileError;
export declare const InvalidExportDeclaration: (declaration: ts.ExportDeclaration) => TranspileError;
export declare const InvalidExtendsExtension: (node: ts.Node) => TranspileError;
export declare const InvalidExportsExtension: (node: ts.Node) => TranspileError;
export declare const InvalidInstanceOfExtension: (node: ts.Node) => TranspileError;
export declare const InvalidJsonFileContent: (node: ts.Node) => TranspileError;
export declare const InvalidPropertyCall: (node: ts.Node) => TranspileError;
export declare const InvalidElementCall: (node: ts.Node) => TranspileError;
export declare const InvalidThrowExpression: (node: ts.Node) => TranspileError;
export declare const ForbiddenStaticClassPropertyName: (node: ts.Node, name: string) => TranspileError;
export declare const MissingClassName: (node: ts.Node) => TranspileError;
export declare const MissingForOfVariables: (node: ts.Node) => TranspileError;
export declare const MissingFunctionName: (declaration: ts.FunctionLikeDeclaration) => TranspileError;
export declare const MissingMetaExtension: (node: ts.Node) => TranspileError;
export declare const NonFlattenableDestructure: (node: ts.Node) => TranspileError;
export declare const UndefinedFunctionDefinition: (functionSymbolId: number) => Error;
export declare const UndefinedScope: () => Error;
export declare const UndefinedTypeNode: (node: ts.Node) => TranspileError;
export declare const UnknownSuperType: (node: ts.Node) => TranspileError;
export declare const UnsupportedImportType: (node: ts.Node) => TranspileError;
export declare const UnsupportedKind: (description: string, kind: ts.SyntaxKind, node: ts.Node) => TranspileError;
export declare const UnsupportedProperty: (parentName: string, property: string, node: ts.Node) => TranspileError;
export declare const UnsupportedForTarget: (functionality: string, version: LuaTarget, node: ts.Node) => TranspileError;
export declare const UnsupportedFunctionWithoutBody: (node: ts.FunctionLikeDeclaration) => TranspileError;
export declare const UnsupportedNoSelfFunctionConversion: (node: ts.Node, name?: string | undefined) => TranspileError;
export declare const UnsupportedSelfFunctionConversion: (node: ts.Node, name?: string | undefined) => TranspileError;
export declare const UnsupportedOverloadAssignment: (node: ts.Node, name?: string | undefined) => TranspileError;
export declare const UnsupportedNonDestructuringLuaIterator: (node: ts.Node) => TranspileError;
export declare const UnresolvableRequirePath: (node: ts.Node, reason: string, path?: string | undefined) => TranspileError;
export declare const ReferencedBeforeDeclaration: (node: ts.Identifier) => TranspileError;
export declare const UnsupportedObjectDestructuringInForOf: (node: ts.Node) => TranspileError;
export declare const InvalidAmbientIdentifierName: (node: ts.Identifier) => TranspileError;
export declare const InvalidForRangeCall: (node: ts.Node, message: string) => TranspileError;
